[tool.ruff]
line-length = 88
target-version = "py311"
# (если используете ruff как форматтер)
# [tool.ruff.format]
# quote-style = "double"

[tool.ruff.lint]
select = [
    "E","F","I","N","W","UP","PLR","PLC",
]
ignore = [
    "E501",    # длина строки форматтером
    "PLC0415", # Локальные импорты нужны для избежания циклических зависимостей
    "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*.py" = ["PLR2004"]
"src/use_cases/*.py" = ["PLR2004"]
"scripts/*.py" = ["E402", "E722", "PLR2004"]
"src/adapters/postgres_repository.py" = ["N812"]
"alembic/env.py" = ["E402"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_subclassing_any = false

# Свести overrides для tests в один блок
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_any_generics = false
warn_return_any = false
warn_no_return = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "slack_sdk.*",
    "openai.*",
    "rapidfuzz.*",
    "psycopg2.*",
    "alembic.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["src.adapters.slack_client", "src.config.settings"]
warn_return_any = false
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = ["app", "scripts.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Exclude telegram tests from CI (they hang due to async/threading issues)
addopts = "--ignore=tests/test_telegram_client.py --ignore=tests/test_telegram_message_processing.py --ignore=tests/test_telegram_e2e.py --ignore=tests/test_telegram_pipeline_e2e.py"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
    "if TYPE_CHECKING:",
]
