name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Parallel execution for faster feedback
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: false

      - name: Install linting tools only (faster than full dependencies)
        run: |
          uv pip install --python $(which python) ruff==0.12.8

      - name: Ruff (format check)
        run: |
          python -m ruff format --check .

      - name: Ruff (lint)
        run: |
          python -m ruff check .

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: false

      - name: Install dependencies (matches Makefile exactly)
        run: |
          uv pip install --python $(which python) -r requirements.txt

      - name: Mypy (strict) - matches Makefile exactly
        run: |
          python -m mypy src --config-file pyproject.toml

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: false

      - name: Install dependencies
        run: |
          uv pip install --python $(which python) -r requirements.txt

      - name: Run tests with coverage (matches Makefile exactly)
        env:
          SLACK_BOT_TOKEN: dummy
          OPENAI_API_KEY: dummy
        run: |
          python -m pytest --cov=src --cov-report=term-missing --cov-report=html --timeout=30

      - name: Upload coverage HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

      - name: Upload coverage report to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
